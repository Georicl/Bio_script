######################################
###main
######################################
###region pairse argument
#create arg
import argparse
import sys
import seqtools
parse = argparse.ArgumentParser(description = "This tool is used to sequence processing, fasta"
                                              " reading and information extraction, and can also be used to process the "
                                              "log files generated by blast and hisat2 and for quality checking of log files,"
                                              "and calculate N50 and GC content ")
subparsers = parse.add_subparsers(dest='command',required=True,help='subcommands')

sort_parser = subparsers.add_parser('sort', help='Sort sequences',usage='cli.py sort [options] gene_fasta out_path')
sort_parser.add_argument('gene_fasta', type=str, help='Input your genome FASTA file')
sort_parser.add_argument('out_path', type=str, help='Output path directory')
sort_parser.add_argument('-r','--reverse', action='store_true', help='Reverse sort order',default=False)

shuffle_parser = subparsers.add_parser('shuffle',help = 'Shuffle sequence')
shuffle_parser.add_argument('gene_fasta', type=str, help='Input your genome FASTA file')
shuffle_parser.add_argument('out_path', type=str, help='Output path directory')

random_parser = subparsers.add_parser('extract',help='Extract random sequences')
random_parser.add_argument('gene_fasta', type=str, help='Input your genome FASTA file')
random_parser.add_argument('out_path', type=str, help='Output path directory')
random_parser.add_argument('number',type=float,help='input your number of gene you want to extract')
random_parser.add_argument('-s','--seed',type=int,help='set seed')

bed_parse = subparsers.add_parser('bed',help='Filter BED file')
bed_parse.add_argument('gene_fasta', type=str, help='Input your genome FASTA file')
bed_parse.add_argument('out_path', type=str, help='Output path directory')
bed_parse.add_argument('bed',type=str,help='input your bed file')

subseq_parse = subparsers.add_parser('subseq',help='sub sequences by geneid')
subseq_parse.add_argument('gene_fasta', type=str, help='Input your genome FASTA file')
subseq_parse.add_argument('out_path', type=str, help='Output path directory')
subseq_parse.add_argument('sub_data',type=str,help='input your sub data file')

search_parse = subparsers.add_parser('search',help='Search subsequences by Nucleotide sequences')
search_parse.add_argument('gene_fasta', type=str, help='Input your genome FASTA file')
search_parse.add_argument('out_path', type=str, help='Output path directory')
search_parse.add_argument('sequence',type=str,
                          help='input sequence which you want to extract')

n50_parse = subparsers.add_parser('N50',help='calculate input fasta file and get N50 and GC content，'
                                             'Statistical series parameters')
n50_parse.add_argument('gene_fasta',type=str, help='Input your genome FASTA file')
n50_parse.add_argument('out_path', type=str, help='Output path directory')
n50_parse.add_argument('-t','--trinity', action='store_true', help="if input is a trinity file, choose it ")

blast_parse = subparsers.add_parser('blast',help='filter indentify you need,if you need to use this mod,please use '
                                                 'blast outputformat 6')
blast_parse.add_argument('blast_in', type=str, help='Input your blast file')
blast_parse.add_argument('out_path', type=str, help='Output path directory')
blast_parse.add_argument('indentify', type=float, help='Filter how much recognition rate is above ,'
                                                       'The input units are %')

get_longest_parse = subparsers.add_parser('get_longest',help='get longest cds sequence')
get_longest_parse.add_argument('gene_fasta', type=str, help='Input your genome **cds** FASTA file')
get_longest_parse.add_argument('out_path', type=str, help='Output path directory')
get_longest_parse.add_argument('gff',type=str,help='input gff3 file')
######################################
##region help out
######################################
if len(sys.argv) == 1:
    parse.print_help()
    sys.exit(1)
if len(sys.argv) == 2 and sys.argv[1] =='sort':
    sort_parser.print_help()
    sys.exit(1)
elif len(sys.argv) == 2 and sys.argv[1] =='shuffle':
    shuffle_parser.print_help()
    sys.exit(1)
elif len(sys.argv) == 2 and sys.argv[1] =='extract':
    random_parser.print_help()
    sys.exit(1)
elif len(sys.argv) == 2 and sys.argv[1] =='bed':
    bed_parse.print_help()
    sys.exit(1)
elif len(sys.argv) == 2 and sys.argv[1] =='subseq':
    subseq_parse.print_help()
    sys.exit(1)
elif len(sys.argv) == 2 and sys.argv[1] =='search':
    search_parse.print_help()
    sys.exit(1)
elif len(sys.argv) == 2 and sys.argv[1] =='N50':
    n50_parse.print_help()
    sys.exit(1)
elif len(sys.argv) == 2 and sys.argv[1] =='blast':
    blast_parse.print_help()
    sys.exit(1)
elif len(sys.argv) == 2 and sys.argv[1] =='get_longest':
    get_longest_parse.print_help()
    sys.exit(1)
#endregion

def handle_sort(args):
    seqtools.seq_sort(args.gene_fasta, args.out_path, args.reverse)

def handle_shuffle(args):
    seqtools.seq_shuffle(args.gene_fasta, args.out_path)

def handle_extract(args):
    seed = args.seed if args.seed is not None else 10
    seqtools.seq_extract(args.gene_fasta, args.number, args.out_path, seed)

def handle_bed(args):
    seqtools.seq_bed_mapping(args.gene_fasta, args.bed, args.out_path)

def handle_subseq(args):
    seqtools.subseq(args.gene_fasta, args.sub_data, args.out_path)

def handle_search(args):
    sequence = seqtools.read_seq(args.sequence)
    seqtools.seq_search(args.gene_fasta, sequence, args.out_path)

def handle_N50(args):
    seqtools.N50(args.gene_fasta, args.out_path, args.trinity)

def handle_blast(args):
    seqtools.blast_identify(args.blast_in, args.out_path, args.indentify)

def handle_get_longest(args):
    seqtools.get_longest(args.gene_fasta, args.out_path, args.gff)

######################################
# 创建命令映射字典
######################################
command_handlers = {
    'sort': handle_sort,
    'shuffle': handle_shuffle,
    'extract': handle_extract,
    'bed': handle_bed,
    'subseq': handle_subseq,
    'search': handle_search,
    'N50': handle_N50,
    'blast': handle_blast,
    'get_longest': handle_get_longest,
}

######################################
# 主处理逻辑
######################################
args = parse.parse_args()

# 获取对应的处理函数并执行
handler = command_handlers.get(args.command)
if handler:
    handler(args)
else:
    parse.print_help()
    sys.exit(1)